name: Build .NET Project

# This workflow is used by services workfow for Setup and Net building
on:
  workflow_call:
    inputs:
      SOLUTION_PATH:
        description: 'The path to the solution file'
        required: true
        type: string
      OUTPUT_FILENAME:
        description: 'Name of the outputfile'
        required: false
        type: string
        default: 'Build-Output'
      CONFIGURATION:
        description: 'Build configuration (e.g., Release or Debug)'
        required: false
        type: string
        default: 'Release'
      PLATFORM:
        description: 'Target platform (e.g., win-x64, linux-x64)'
        required: false
        type: string
        default: 'win-x64'
      TEST_PATH:
        description: 'The test csproj path'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
      #os: [windows-latest, ubuntu-latest]
        os: [ubuntu-latest]

    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Debug Environment Variables
        run: env

      # 1. Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Holt die gesamte Historie

      # # 2. NuGet-set up
      # - name: Install NuGet CLI
      #   uses: NuGet/setup-nuget@v1

      # 7. NuGet-Pakete restore
      # - name: Restore NuGet packages/ Install Dependencies
      #   run: dotnet restore ${{ inputs.SOLUTION_PATH }}

      # 8. Projekt bauen
      - name: Build the project
        run: dotnet build ${{ inputs.SOLUTION_PATH }} --configuration ${{ inputs.CONFIGURATION }}

      # 9. Projekt publish
      - name: Test the project
        #run: dotnet test ${{ inputs.TEST_PATH }} --configuration ${{ inputs.CONFIGURATION }} -l trx -v normal --no-build
        run: dotnet test ${{ inputs.TEST_PATH }} --configuration ${{ inputs.CONFIGURATION }}
        if: ${{ inputs.TEST_PATH != null}}

     # 10. Projekt publish
      - name: Publish the project
        run: dotnet publish ${{ inputs.SOLUTION_PATH }} --configuration ${{ inputs.CONFIGURATION }} --runtime ${{ inputs.PLATFORM }} --output ./deploy --self-contained false

      # 11. Veröffentlichte Dateien prüfen
      - name: List deployed files
        shell: pwsh
        run: |
          if (Test-Path -Path ./deploy) {
            Write-Host "Listing all files in deploy folder:"
            Get-ChildItem -Path ./deploy -Recurse
          } else {
            Write-Host "Deploy folder does not exist."
          }

      # 12. Artifacts Upload
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.OUTPUT_FILENAME }}
          path: ./deploy
      
      # 13. END
      - name: End Signed San
        run: echo "Success. End GitHub Actions"
